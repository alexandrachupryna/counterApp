{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Counter","react_default","a","createElement","className","this","props","count","React","Component","Button","label","onClick","Text","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isCountShown","buttonLabel","addCount","bind","assertThisInitialized","reduceCount","toggleClass","setState","prevState","_ref","_ref2","currentState","console","log","Fragment","App_Counter","App_Button","App_Text","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,0LAEF,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,KAAKC,MAAMF,WAAYC,KAAKC,MAAMC,cAFvCC,IAAMC,YAMtBC,mLACK,IACEC,EAAUN,KAAKC,MAAfK,MAEP,OACIV,EAAAC,EAAAC,cAAA,UAAQS,QAASP,KAAKC,MAAMM,QAASR,UAAWC,KAAKC,MAAMF,WACtDO,UANMH,IAAMC,WAYrBI,mLAEA,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,KAAKC,MAAMF,WAAYC,KAAKC,MAAMC,OAAS,GAAK,kBAAoB,aAH3EC,IAAMC,WAwDVK,cA/Cb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KACDe,MAAS,CACZd,MAAO,EACPe,cAAc,EACdC,YAAa,QAEfR,EAAKS,SAAWT,EAAKS,SAASC,KAAdT,OAAAU,EAAA,EAAAV,CAAAD,IAChBA,EAAKY,YAAcZ,EAAKY,YAAYF,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IACnBA,EAAKa,YAAcb,EAAKa,YAAYH,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IATFA,0EAajBV,KAAKwB,SAAS,SAACC,EAADC,KAAcxB,MAAd,MAA2B,CACvCA,MAAOuB,EAAUvB,MAAQ,2CAK3BF,KAAKwB,SAAS,SAACC,EAADE,KAAczB,MAAd,MAA2B,CACvCA,MAAOuB,EAAUvB,MAAQ,2CAK3B,IAAM0B,EAAe5B,KAAKgB,MAAMC,aAChCjB,KAAKwB,SAAS,CACZP,cAAeW,qCAMjB,OADAC,QAAQC,IAAI9B,KAAKgB,MAAMd,OAErBN,EAAAC,EAAAC,cAACF,EAAAC,EAAMkC,SAAP,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,CAASjC,UAAWC,KAAKgB,MAAMC,aAAe,cAAe,UAAYf,MAAOF,KAAKgB,MAAMd,QAC3FN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACmC,EAAD,CAAQlC,UAAU,aAAaO,MAAM,IAAIC,QAASP,KAAKmB,WACvDvB,EAAAC,EAAAC,cAACmC,EAAD,CAAQlC,UAAU,cAAcO,MAAM,IAAIC,QAASP,KAAKsB,cACxD1B,EAAAC,EAAAC,cAACmC,EAAD,CAAQlC,UAAU,eAAeO,MAAON,KAAKgB,MAAMC,aAAe,OAAS,OAAQV,QAASP,KAAKuB,eAEnG3B,EAAAC,EAAAC,cAACoC,EAAD,CAAMnC,UAAU,cAAcG,MAAOF,KAAKgB,MAAMd,gBA1CtCC,IAAMC,WCjBJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2dfdef55.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Counter extends React.Component {\n  render() {\n    return <div className={this.props.className}>{this.props.count}</div>\n  }\n}\n\nclass Button extends React.Component {\n  render() {\n      const {label } = this.props;\n\n      return (\n          <button onClick={this.props.onClick} className={this.props.className}>\n              {label}\n          </button>\n      );\n  }\n}\n\nclass Text extends React.Component {\n  render() {\n      return (\n          <div className={this.props.className}>{this.props.count >= 10 ? \"You reached 10!\" : null}</div>\n      );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state =  {\n      count: 0,\n      isCountShown: false,\n      buttonLabel: \"Hide\"\n    }\n    this.addCount = this.addCount.bind(this);\n    this.reduceCount = this.reduceCount.bind(this);\n    this.toggleClass = this.toggleClass.bind(this);\n  }\n\n  addCount() {\n    this.setState((prevState, { count }) => ({\n      count: prevState.count + 1\n    }));\n  }\n\n  reduceCount() {\n    this.setState((prevState, { count }) => ({\n      count: prevState.count - 1\n    }));\n  }\n\n  toggleClass() {\n    const currentState = this.state.isCountShown;\n    this.setState({ \n      isCountShown: !currentState\n    });\n  }\n\n  render() {\n    console.log(this.state.count);\n    return (\n      <React.Fragment>\n        <Counter className={this.state.isCountShown ? 'counterNone': 'counter'}  count={this.state.count}  />\n        <div className=\"buttons\">\n          <Button className=\"buttonPlus\" label=\"+\" onClick={this.addCount}/>\n          <Button className=\"buttonMinus\" label=\"-\" onClick={this.reduceCount} />\n          <Button className=\"counterShown\" label={this.state.isCountShown ? \"Show\" : \"Hide\"} onClick={this.toggleClass} />\n        </div>\n        <Text className=\"textMessage\" count={this.state.count} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}